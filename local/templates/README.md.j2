{{python_readme_header_md}}

This project aims to simplify management of user configuration files, user (or
system-wide) package installations, system settings and more on a variety of
platforms.

Reasons to use it:
1. Simplify bootstrapping a fresh system to a "developer workstation" in as few
steps as possible
   1. This can be a simpler options for teams or individuals who don't have
   infrastructure to manage system-install images, system-distribution build
   systems, other kinds of provisioning automation, etc.
1. Normalize software configurations for a team of developers, but still allow
personalized overrides when desired (e.g. text-editor or terminal configs)
   1. This can help make your team or organization's development environment
   more approachable to new or inexperienced developers (ask yourself this:
   are the code changes usually even the hard part?)
1. Relies on a minimal [data repository](md/data_repository.md) that can be
managed with version control, shared by multiple people, open source to provide
examples to the community, etc.
   1. This enables a workflow for adding, removing, updating and re-configuring
   software used by a project-ecosystem over time

# Getting Started

This package attempts to adhere to the
[XDG Base Directory Specification](https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html).
It keeps stateful formation that needs to persist between command invocations
in a `{{package["name"]}}` sub-directory of the user-state directory controlled
by `XDG_STATE_HOME` (or the default: `$HOME/.local/state`).

One tracked piece of stateful information is the location of the current
[data repository](md/data_repository.md). If this is not changed (via the `use`
command), it checks a `{{package["name"]}}/default` sub-directory in the
user-config directory controlled by `XDG_CONFIG_HOME` (or the default:
`$HOME/.config`).

## System Requirements

1. It is assumed that the system has a [Python](https://www.python.org/)
executable and [pip](https://pypi.org/project/pip/) is available to it as
an installed package (can be checked with: `python[3][.exe] -m pip --version`
or `pip[3][.exe] --version`).
2. A mechanism to obtain a [data repository](md/data_repository.md) via a
network connection, if one won't be created from scratch (e.g. a
[git](https://git-scm.com/) client).

## Installation and Setup

1. Install the package with `pip[3][.exe] --user {{package["name"]}}` or
`python[3][.exe] -m pip --user {{package["name"]}}`.
1. Test that `{{package["name"]}}` is now a shell command with
`{{package["name"]}} --version`.
   1. If not, you may need to invoke
   `{{package["name"]}}` directly from `$HOME/.local/bin` or
   `%APPDATA%\Python`.
(see the
[pip documentation](https://pip.pypa.io/en/stable/user_guide/?highlight=--user#user-installs)
for more info).
1. Run `{{package["name"]}} use` to view the default
[data repository](md/data_repository.md) location (printed to the console):

```
$ rcmpy use
rcmpy.state                          - INFO   - Using directory '/home/vkottler/.config/rcmpy/default'.
```

4. Begin setting up your [data repository](md/data_repository.md) in this
location, or:
   1. Download (or `git clone`) one to that default location.
   1. Create a [symbolic link](https://en.wikipedia.org/wiki/Symbolic_link) at
   that location, pointing to one.
   1. Run `{{package["name"]}} use <path>` to point `{{package["name"]}}` at
   an existing one at any arbitrary location.
5. Run `rcmpy apply` to perform tasks specified in the
[top-level configuration file](md/data_repository.md#top-level-configuration).
{% if "help" in global %}

# Command-line Options

```
$ {{" ".join(help["args"])}}

{{help["stdout"]}}
```
{% endif %}

## Sub-command Options
{% for command in package["commands"] %}

### `{{command["name"]}}`
{% set help_data = global["help-" + command["name"]] %}

```
$ {{" ".join(help_data["args"])}}

{{help_data["stdout"]}}
```
{% endfor %}

{{python_readme_dep_graph_md}}
